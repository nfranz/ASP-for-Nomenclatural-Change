% Franz N.M., Zhang C., Lee J. 2017. A logic approach to modeling nomenclatural change.
% Manuscript in press with Cladistics.
% Supplementary Materials S1 - clingo code for the 20 nomenclatural taxon use case.
% Version January 25, 2017.

%%%%%%%%%%%%%%%%%%%%%%%%%

% 1. Define variables, domains and taxonomic and nomenclatural starting conditions

% 1.1. There are two steps: 0 = original tree, 1 = altered tree (revision)
#const maxstep=1.

step(0..maxstep).
astep(0..maxstep-1).

#domain step(ST).
#domain astep(T).

% 1.2. Assign groups of nodes to their taxonomic ranks
family_node(1).
subfamily_node(2).
tribe_node(3;4).
genus_node(5;6;7;8).
species_node(9;10;11;12;13;14;15;16;17;18;19;20).

% 1.3. All ranked nodes are members of the entire set of nodes
node(NN) :- family_node(NN).
node(NN) :- subfamily_node(NN).
node(NN) :- tribe_node(NN).
node(NN) :- genus_node(NN).
node(NN) :- species_node(NN).

% 1.4. Specify name strings for ranked names
family_name(FName) :- type_identity(_,FName,_,_,_,_).
subfamily_name(SFName) :- type_identity(_,_,SFName,_,_,_).
tribe_name(TName) :- type_identity(_,_,_,TName,_,_).

%% the genus_name should be determined by the gender
genus_name(Prefix,GName,"m") :- type_identity(Prefix,_,_,_,GName,_).
genus_name(Prefix,GName,"f") :- type_identity(Prefix,_,_,_,_,GName).

%% epithet name with gender information added
%% epithet_name(Species_Prefix, Name, Homonymy_Name, Gender)

epithet_name("prim-","primus","primulus","m").
epithet_name("prim-","prima","primula","f").

epithet_name("secund-","secundus","secundlus","m").
epithet_name("secund-","secunda","secundula","f").

epithet_name("terti-","tertius","tertilus","m").
epithet_name("terti-","tertia","tertiula","f").

epithet_name("quart-","quartus","quartlus","m").
epithet_name("quart-","quarta","quartula","f").

epithet_name("quint-","quintus","quintlus","m").
epithet_name("quint-","quinta","quintula","f").

epithet_name("sext-","sextus","sextlus","m").
epithet_name("sext-","sexta","sextula","f").

epithet_name("septim-","septimus","septimlus","m").
epithet_name("septim-","septima","septimula","f").

epithet_name("octav-","octavus","octavlus","m").
epithet_name("octav-","octava","octavula","f").

epithet_name("non-","nonus","nonlus","m").
epithet_name("non-","nona","nonula","f").

epithet_name("decim-","decimus","decimlus","m").
epithet_name("decim-","decima","decimula","f").

% 1.5. Create multiple node domains in general and for each taxonomic rank
#domain node(N).
#domain node(N1).
#domain family_node(FN).
#domain family_node(FN1).
#domain subfamily_node(SFN).
#domain subfamily_node(SFN1).
#domain tribe_node(TN).
#domain tribe_node(TN1).
#domain genus_node(GN).
#domain genus_node(GN1).
#domain species_node(SN).
#domain species_node(SN1).

% 1.6. Specify the original tree shape at t = 0
edge(1,2,0).
edge(2,3,0).
edge(2,4,0).
edge(3,5,0).
edge(3,6,0).
edge(4,7,0).
edge(4,8,0).
edge(5,9,0).
edge(5,10,0).
edge(5,11,0).
edge(6,12,0).
edge(6,13,0).
edge(6,14,0).
edge(7,15,0).
edge(7,16,0).
edge(7,17,0).
edge(8,18,0).
edge(8,19,0).
edge(8,20,0).

% 1.7. Specify the original genus/epithat combinations for species names at t = 0

%% change the name pattern
%% speciesspecies_node_genus_name_with_year_node (Node_ID,Genus_Prefix_Name,Species_Prefix_Name,Year,Gender,Time_Step)

species_node_genus_name_with_year(9,"Agen-","prim-",1775,"m",0).
species_node_genus_name_with_year(10,"Agen-","terti-",1950,"m",0).
species_node_genus_name_with_year(11,"Agen-","quart-",1955,"m",0).
species_node_genus_name_with_year(12,"Egen-","secund-",1780,"f",0).
species_node_genus_name_with_year(13,"Egen-","quint-",1960,"f",0).
species_node_genus_name_with_year(14,"Egen-","sext-",1965,"f",0).
species_node_genus_name_with_year(15,"Igen-","prim-",1785,"f",0).
species_node_genus_name_with_year(16,"Igen-","septim-",1970,"f",0).
species_node_genus_name_with_year(17,"Igen-","octav-",1975,"f",0).
species_node_genus_name_with_year(18,"Ogen-","secund-",1790,"m",0).
species_node_genus_name_with_year(19,"Ogen-","non-",1980,"m",0).
species_node_genus_name_with_year(20,"Ogen-","decim-",1985,"m",0).

species_node_genus_name(Node_ID,Genus_Prefix_name,Species_Prefix_name,Gender,Time_Step) :-
	species_node_genus_name_with_year(Node_ID,Genus_Prefix_name,Species_Prefix_name,Year,Gender,Time_Step).
	
species_name_year(Genus_Prefix_name,Species_Prefix_name,Year) :- 
	species_node_genus_name_with_year(Node_ID,Genus_Prefix_name,Species_Prefix_name,Year,Gender,Time_Step).

% 1.8. Persistently constrain the species epithet to stay assigned to its original node (species remain valid taxonomically in this use case)
species_node_epithet(Node_ID,Species_Prefix_Name) :-
	species_node_genus_name(Node_ID,_,Species_Prefix_Name,_,0).

% 1.9. Encode type identity (= sharing them same lowest level type and age) across taxonomic ranks (species to family)
%% type_identity(Prefix, Family,SubFamily,Tribe,Genus_Masculine,Genus_Feminine)
type_identity("Agen-","Agenidae","Ageninae","Agenini","Agenus","Agena").
type_identity("Egen-","Egenidae","Egeninae","Egenini","Egenus","Egena").
type_identity("Igen-","Igenidae","Igeninae","Igenini","Igenus","Igena").
type_identity("Ogen-","Ogenidae","Ogeninae","Ogenini","Ogenus","Ogena").
type_identity("Novagen-","Novagenidae","Novageninae","Novagenini","Novagenus","Novagena").
type_identity("Novegen-","Novegenidae","Novegeninae","Novegenini","Novegenus","Novegena").
type_identity("Novigen-","Novigenidae","Novigeninae","Novigenini","Novigenus","Novigena").
type_identity("Novogen-","Novogenidae","Novogeninae","Novogenini","Novogenus","Novogena").

% 1.10. Specify the name years and persistently constrain names to a specific year
name_year("Agenidae", 1775).
name_year("Ageninae", 1775).
name_year("Agenini", 1775).
name_year("Igenini", 1785).
name_year("Agen-", 1775).
name_year("Egen-", 1780).
name_year("Igen-", 1785).
name_year("Ogen-", 1790).

%% epithet name is not needed
% name_year("primus", 1775).
% name_year("tertius", 1950).
% name_year("quartus", 1955).
% name_year("secunda", 1780).
% name_year("quinta", 1960).
% name_year("sexta", 1965).
% name_year("prima", 1785).
% name_year("septima", 1970).
% name_year("octava", 1975).
% name_year("secundus", 1790).
% name_year("nonus", 1980).
% name_year("decimus", 1985).

year(Y) :- name_year(_,Y).
year(Y) :- species_node_genus_name_with_year(_,_,_,Y,_,0).

%% new tribe name and year
name_year("Egenini",2000).
name_year("Ogenini",2000).

%% new subfamily name and year
name_year("Egeninae",2000).
name_year("Igeninae",2000).
name_year("Ogeninae",2000).

%% new family name and year
name_year("Egenidae",2000).
name_year("Igenidae",2000).
name_year("Ogenidae",2000).

%%%%%%%%%%%%%%%%%%%%%%%%%

% 2. Uniqueness and existence constraints (UEC)

% 2.1. Each node is assigned a single name, year, and parental edge (except for the root)
:- not 1{family_node_name(FN,NN,ST):family_name(NN)}1.
:- not 1{subfamily_node_name(SFN,NN,ST):subfamily_name(NN)}1.
:- not 1{tribe_node_name(TN,NN,ST):tribe_name(NN)}1.

%% need to change the genus_name and epithet_name
:- not 1{genus_node_name(GN,NN,Gender,ST):genus_name(NN,_,Gender)}1.
:- not 1{species_node_genus_name(SN,NN,NN1,Gender,ST): genus_name(NN,_,Gender): epithet_name(NN1,_,_,Gender)}1.

:- not 1{node_year(N,YY,ST):year(YY)}1.

:- not 1{edge(NN,N,ST):node(NN)}1, N != 1.

%%%%%%%%%%%%%%%%%%%%%%%%%

% 3. Inertia conditions that specify consistent relationships unless change is mandated by the model

% 3.1. Inertia means that edges, node/name relationships, and node years valid at t = 0 will be preserved at t = 1; down to the genus level (species-level edges may change)
{edge(N,N1,T+1)} :- edge(N,N1,T).

{family_node_name(FN,Name,T+1)} :- family_node_name(FN,Name,T).
{subfamily_node_name(SFN,Name,T+1)} :- subfamily_node_name(SFN,Name,T).
{tribe_node_name(TN,Name,T+1)} :- tribe_node_name(TN,Name,T).
{genus_node_name(GN,Name,Gender,T+1)} :- genus_node_name(GN,Name,Gender,T).
{species_node_genus_name(SN,Name1,Name2,Gender,T+1)} :- species_node_genus_name(SN,Name1,Name2,Gender,T).

{node_year(N,Y,T+1)} :- node_year(N,Y,T).

%%%%%%%%%%%%%%%%%%%%%%%%%

% 4. Identify the priority-carrying terminal nodes (species) of their respective parent nodes (genus and higher), i.e. the oldest children
% higher_node(N,ST) :- edge(N,N1,ST). 
% terminal_node(N,ST) :- not higher_node(N,ST).

not_senior_child(N,N1,ST) :-
   edge(N,N1,ST), edge(N,N2,ST), N1!=N2,
   node_year(N1,Y1,ST), node_year(N2,Y2,ST),
   Y1 > Y2.

senior_child(N,N1,ST) :-
   edge(N,N1,ST), not not_senior_child(N,N1,ST).

%%%%%%%%%%%%%%%%%%%%%%%%%

% 5. Persistently connect nodes to their names and years at each taxonomic rank (family to species)
node_year(FN,Year,ST) :-
   family_node_name(FN,FName,ST),
   name_year(FName,Year).

node_year(SFN,Year,ST) :-
   subfamily_node_name(SFN,SFName,ST),
   name_year(SFName,Year).

node_year(TN,Year,ST) :-
   tribe_node_name(TN,TName,ST), 
   name_year(TName,Year).

node_year(GN,Year,ST) :- 
   genus_node_name(GN,Name,Gender,ST),
   name_year(Name, Year).

%% change made   
node_year(SN,Year,ST) :-
   species_node_genus_name_with_year(SN,Name1,Name,Year,Gender,ST).
   
%%%%%%%%%%%%%%%%%%%%%%%%%

% 6. Infer the required nomenclatural changes at t = 1 - valid and newly valid names

% 6.1. The valid genus name - at any time - is that which corresponds to the genus name of the priority-carrying species epithet (= senior child)
genus_node_name(GN,Name,Gender,ST) :-
   senior_child(GN,SN,ST),
   species_node_genus_name(SN,Name,Name1,Gender,ST).

% 6.2. The species epithet persists from t = 0 to t = 1; however, the corresponding genus name is determined by the priority-carrying, senior child
species_node_genus_name(SN,Name,Name1,Gender,ST) :-
   edge(GN,SN,ST),
   not senior_child(GN,SN,ST),
   genus_node_name(GN,Name,Gender,ST),
   species_node_epithet(SN,Name1). 

% 6.3. A species epithet is assigned a new genus name and combination (Nov-...) when it gains priority through transfer of a previous priority-carrying child at t = 1
species_node_genus_name(SN,Name1,Name2,Gender,T+1) :-
  senior_child(GN,SN,T+1),
  node_year(GN,Year,T),
  node_year(SN,Year1,T),
  Year<Year1,
  species_node_genus_name(SN,Name,Name2,Gender,T),
  new_genus_name(Name,Name1).
  
% 6.4.  If the change species node is senior node at t=1, there should be an inverse move.
edge(TN,GN1,T+1):- 
	edge(TN,GN,T), 
	edge(GN,SN,T), 
	senior_child(GN1,SN,T+1),
	GN != GN1.
	
inverse_move :-
	edge(TN,GN,T), 
	edge(GN,SN,T), 
	senior_child(GN1,SN,T+1),
	GN != GN1.

% 6.5. The tribe-level name is determined by its prority-carrying genus name
tribe_node_name(TN,TName,ST) :-
   senior_child(TN,GN,ST),
   genus_node_name(GN,GName,Gender,ST),
   type_identity(GName,_,_,TName,_,_).

% 6.6. The subfamily-level name is determined by its priority-carrying tribe name
subfamily_node_name(SFN,SFName,ST) :-
   senior_child(SFN,TN,ST),
   tribe_node_name(TN,TName,ST),
   type_identity(_,_,SFName,TName,_,_).
   
% 6.7. The family-level name is determined by its priority-carrying subfamily name
family_node_name(FN,FName,ST) :-
   senior_child(FN,SFN,ST),
   subfamily_node_name(SFN,SFName,ST),
   type_identity(_,FName,SFName,_,_,_).   

%%%%%%%%%%%%%%%%%%%%%%%%%

% 7. Specify the spelling of the new names and their years (whenever such new coining is required) to be the input of the new name and year

new_genus_name("Agen-","Novagen-").
new_genus_name("Egen-","Novegen-").
new_genus_name("Igen-","Novigen-").
new_genus_name("Ogen-","Novogen-").

year(2000).
name_year("Novagen-",2000).
name_year("Novagenini",2000).
name_year("Novageninae",2000).
name_year("Novagenidae",2000).

name_year("Novegen-",2000).
name_year("Novegenini",2000).
name_year("Novegeninae",2000).
name_year("Novegenidae",2000).

name_year("Novigen-",2000).
name_year("Novigenini",200).
name_year("Novigeninae",200).
name_year("Novigenidae",2000).

name_year("Novogen-",2000).
name_year("Novogenini",2000).
name_year("Novogeninae",2000).
name_year("Novogenidae",2000).

%%%%%%%%%%%%%%%%%%%%%%%%%

% 8. Specify the taxonomic changes (= stable models) to be valid at t = 1; choose one species-level node to be transferred into a new parent genus

% 8.1 Choose one new species to change at one time
{new_species_placement(GN2,SN2,T+1):species_node(SN2):genus_node(GN2)}1.

%new_species_placement(7,12,1).

% 8.2 If the new species and the original edge are the same, the change will not happen
:- edge(N,N1,T), new_species_placement(N,N1,T+1).

% 8.3 The new placed species will be a new edge
edge(GN,SN,1) :- new_species_placement(GN,SN,1).

%%%%%%%%%%%%%%%%%%%%%%%%%

% 9. Change outcomes and aggregation
% 9.1. New combination (Does the revision year needed for the new combination?)
new_combination(SN,Name,Name1) :-
	node_name(SN,Name,Name1,Year,T+1),
	not node_name(SN,Name,Name1,Year,T).

% 9.1.1 New gender change
node_name_with_gender(SN,SName,Gender,ST):-
	node_name(SN,GName,SName,Year,ST),
	epithet_name(Name1,SName,_,Gender). 

node_name_with_gender(SN,SName,Gender,ST):-
	node_name(SN,GName,SName,Year,ST),
	epithet_name(Name1,_,SName,Gender). 

new_gender_change(SN,SName,SName1):-
	node_name_with_gender(SN,SName1,Gender1,1),
	node_name_with_gender(SN,SName,Gender,0),
	Gender != Gender1.

% 9.2. New placememnt. inverse move vs not inverse move
new_placement(SN,Speices_Name,Genus_Name,Genus_Name1) :-
	new_species_placement(GN,SN,T+1),
	species_node_genus_name(SN,GName,SName,Gender,T),
	species_node_genus_name(SN,GName1,SName,Gender1,T+1),
	epithet_name(SName,Speices_Name,_,Gender),
	genus_name(GName,Genus_Name,Gender),
	genus_name(GName1,Genus_Name1,Gender1),
	not inverse_move.
	
new_placement(SN1,Speices_Name,Genus_Name,Genus_Name1) :-
	new_species_placement(GN,SN,T+1),
	species_node_genus_name(SN,GName1,SName1,Gender,T),
	genus_node_name(GN,GName,Gender2,T),
	species_node_genus_name(SN1,GName,SName,Gender1,T),	
	epithet_name(SName,Speices_Name,_,Gender1),
	genus_name(GName,Genus_Name,Gender2),
	genus_name(GName1,Genus_Name1,Gender),
	inverse_move.

% 9.3. Infer the required nomenclatural changes at t = 1 - newly synonymous names and their valid counterparts 
% 9.3.1. species level synonym - not needed here

% 9.3.2. genus level synonym: If a species-level node gets transferred, leading to the creation of a new combination at t = 1, then its genus-level name at t = 0...
% ...is moved into synonymy of the valid genus-level name at t =1 
genus_synonym(GN1,Genus_Name,is_synonym_of, Genus_Name1,Year) :-
   senior_child(GN1,SN,T),
   not senior_child(GN,SN,T+1),
   edge(GN,SN,T+1),
   species_node_genus_name(SN,Name,_,Gender,T),
   genus_name(Name,Genus_Name,Gender),
   species_node_genus_name(SN,Name1,_,Gender1,T+1),
   genus_name(Name1,Genus_Name1,Gender1),
   node_year(SN,Year,T).
   
% 9.3.3. tribe level synonym: Typification rules - connection through type identity - signify that when a genus name is rendered synonymous at t = 1 and that name is priority-carrier...
% ...for its tribe name at t = 0, then the corresponding tribe name is also rendered synonymous at t =1
tribe_synonym(TN,Name,is_synonym_of,Name1,Year) :-
   senior_child(TN,GN,T),
   genus_synonym(GN,Name2,_,Name3,Year),
   genus_name(Prefix_Name2,Name2,_),
   genus_name(Prefix_Name3,Name3,_),
   genus_node_name(GN2,Prefix_Name2,_,T),
   genus_node_name(GN3,Prefix_Name3,_,T),
   edge(TN2,GN2,T),
   edge(TN3,GN3,T),
   tribe_node_name(TN2,Name,T),
   tribe_node_name(TN3,Name1,T).

% 9.4 New names
% 9.4.1 Overlapped name
overlap_name(Name) :-
	node_name(N,Name,Year,T),
	node_name(N1,Name,Year,T+1).
	
overlap_genus_prefix(Name) :-
	node_name(GN,Name1,Year,T),
	node_name(GN1,Name2,Year,T+1),
	genus_name(Name,Name1,_),
	genus_name(Name,Name2,_).
	
% 9.4.2 New genus
new_genus(GN,Genus_Name,Year) :-
	genus_node_name(GN,GName,Gender,T+1),
	not genus_node_name(GN,GName,Gender,T),
	not overlap_genus_prefix(GName),
	node_name(GN,Genus_Name,Year,T+1).

% 9.4.3 New tribe
new_tribe(TN,TName,Year) :-
	tribe_node_name(TN,TName,T+1),
	name_year(TName,Year),
	not tribe_node_name(TN,TName,T),
	not overlap_name(TName).

% 9.4.4. Species-level homonymy avoidance
pre_species_node_name(SN,GName,Name1,Year,Gender,ST) :-
  species_node_genus_name(SN,Name,Name1,Gender,ST),
  node_year(SN,Year,ST),
  genus_name(Name,GName,Gender).
 
homonymy_node(SN,Name1,Gender,Year) :-  
	pre_species_node_name(SN,GName,Name1,Year,Gender,ST),
	pre_species_node_name(SN1,GName,Name1,Year1,Gender,ST),
	SN != SN1.
  
node_name(SN,GName,SName,Year,ST) :- 
	pre_species_node_name(SN,GName,Name1,Year,Gender,ST),
	pre_species_node_name(SN1,GName,Name1,Year1,Gender,ST),
	SN != SN1,
	Year1 > Year,
	epithet_name(Name1,SName,_,Gender). 

node_name(SN,GName,SName,Year,ST) :- 
	pre_species_node_name(SN,GName,Name1,Year,Gender,ST),
	pre_species_node_name(SN1,GName,Name1,Year1,Gender,ST),
	SN != SN1,
	Year1 < Year,
	epithet_name(Name1,_,SName,Gender). 

node_name(SN,GName,SName,Year,ST) :- 
	pre_species_node_name(SN,GName,Name1,Year,Gender,ST),
	not homonymy_node(SN,Name1,Gender,Year),
	epithet_name(Name1,SName,_,Gender). 

% 9.5 New type designations
% 9.5.1 New type designation - genus level
new_genus_type_designation(SName,GName):-
	new_genus(GN,GName,Year),
	senior_child(GN,SN,T+1),
	node_name(SN,GName,SName,Year1,T+1).

% 9.5.2 New type designation - tribe level
new_tribe_type_designation(GName,TName) :-
	new_tribe(TN,TName,Year),
	senior_child(TN,GN,T+1),
	node_name(GN,GName,Year1,T+1).

% 9.6 Aggregation of the results
total_new_combination(Number) :- 
	Number = #count{new_combination(_,_,_)}.
	
total_new_gender_change(Number) :- 
	Number = #count{new_gender_change(_,_,_)}.

total_new_placement(Number) :- 
	Number= #count{new_placement(_,_,_,_)}.

total_synonym(Number) :- 
	Number1 = #count{genus_synonym(_,_,_,_,_)},
	Number2 = #count{tribe_synonym(_,_,_,_,_)},
	Number = Number1 + Number2.

total_new_name(Number) :- 
	Number1 = #count{new_genus(_,_,_)},
	Number2 = #count{new_tribe(_,_,_)},
	Number = Number1 + Number2.	

%%%%%%%%%%%%%%%%%%%%%%%%%

% 10. Output display preferences
% 10.1. If the non-leaf node does not have any child, then it should not be displayed
node_name(FN,Name,Year,ST) :-
  family_node_name(FN,Name,ST),
  name_year(Name,Year),
  edge(FN,N,ST).

node_name(SFN,Name,Year,ST) :-
  subfamily_node_name(SFN,Name,ST),
  name_year(Name,Year),
  edge(SFN,N,ST).

node_name(TN,Name,Year,ST) :-
  tribe_node_name(TN,Name,ST),
  name_year(Name,Year),
  edge(TN,N,ST).
  
node_name(GN,GName,Year,ST) :-
  genus_node_name(GN,Name,Gender,ST),
  genus_name(Name,GName,Gender),
  name_year(Name,Year),
  edge(GN,N,ST).
  
node_name(SN,GName,SName,Year,0) :-
	species_node_genus_name_with_year(SN,Name,Name1,Year,Gender,0),
	epithet_name(Name1,SName,_,Gender),
	genus_name(Name,GName,Gender).
  
% 10.2. show the new graph at time T+1 as revised_edge. All nodes with valid node names will be shown
revised_edge(N,N1) :- 
	edge(N,N1,T+1), 
	node_name(N,_,_,T+1),
	node_name(N1,_,_,T+1).
	
revised_edge(N,N1) :- 
	edge(N,N1,T+1), 
	node_name(N,_,_,T+1),
	node_name(N1,_,_,_,T+1).

% 10.3 and 10.4 Show revised edges and valid names at = 1; show (aggregated) nomenclatural emendations

#hide.

#show new_species_placement/3.
#show revised_edge/2.

#show node_name(N,Name,Year,1).
#show node_name(_,Name,Name1,Year,1).

#show inverse_move.

#show new_combination/3.
%#show new_gender_change/3.
%#show new_placement/4.
#show genus_synonym/5.
#show tribe_synonym/5.

#show new_genus/3.
#show new_tribe/3.
#show new_genus_type_designation/2.
#show new_tribe_type_designation/2.

#show total_new_combination/1.
#show total_new_gender_change/1.

%#show total_new_placement/1.
%#show total_synonym/1.
%#show total_new_name/1.